from flask import Flask, render_template, request
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP

app = Flask(__name__)

# Load the RSA key pair
try:
    with open(r"C:\Users\hp\OneDrive\Desktop\Internship report\RSA project\decrypted_private_key.pem", "r") as file:
        private_key = RSA.import_key(file.read())
    with open(r"C:\Users\hp\OneDrive\Desktop\Internship report\RSA project\public_key.pem", "r") as file:
        public_key = RSA.import_key(file.read())
except FileNotFoundError:
    print("Key file not found. Make sure the paths are correct.")
    exit(1)
except ValueError:
    print("Invalid key file. Make sure the key files are correct.")
    exit(1)

def encrypt_message(message, public_key):
    try:
        cipher = PKCS1_OAEP.new(public_key)
        encrypted_message = cipher.encrypt(message.encode())
        return encrypted_message.hex()
    except Exception as e:
        print("Encryption error:", e)
        return None

def decrypt_message(encrypted_message, private_key):
    try:
        cipher = PKCS1_OAEP.new(private_key)
        decrypted_message = cipher.decrypt(encrypted_message)
        return decrypted_message.decode()
    except Exception as e:
        print("Decryption error:", e)
        return None

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/encrypt', methods=['POST'])
def encrypt():
    try:
        message = request.form['message']
        encrypted_message = encrypt_message(message, public_key)
        if encrypted_message:
            return render_template('encrypted.html', encrypted_message=encrypted_message)
        else:
            return "Encryption failed."
    except Exception as e:
        print("Encryption route error:", e)
        return "Internal server error."

@app.route('/decrypt', methods=['POST'])
def decrypt():
    try:
        encrypted_message_hex = request.form['encrypted_message']
        encrypted_message = bytes.fromhex(encrypted_message_hex)
        decrypted_message = decrypt_message(encrypted_message, private_key)
        if decrypted_message:
            return render_template('decrypted.html', decrypted_message=decrypted_message)
        else:
            return "Decryption failed."
    except Exception as e:
        print("Decryption route error:", e)
        return "Internal server error."

if __name__ == '__main__':
    app.run(debug=True)
